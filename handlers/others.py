import asyncio

from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters.command import CommandStart, Command
from aiogram.fsm.context import FSMContext
import database.requests.get as get
import database.requests.add as add
import database.requests.others as set
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
import keyboards.inline as kb
import keyboards.reply as kbr
from aiogram.types import FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

import qrcode
import re
import os
from dotenv import load_dotenv, find_dotenv
from pyrogram import Client
from pyrogram.raw.functions.contacts import ResolveUsername


load_dotenv(find_dotenv())

router = Router()

pyrogram_client = Client(
    "michael",
    api_id=25172187,
    api_hash="c163275c64658d29c719f13786a92cbb",
    bot_token=os.getenv('TOKEN'),
    in_memory=False
)
async def resolve_username_to_user_id(username: str) -> int | None:
    try:
        await pyrogram_client.start()
    finally:
        r = await pyrogram_client.invoke(ResolveUsername(username=username))
        if r.users:
            return r.users[0].id


class Reg(StatesGroup):
    faculty = State()
    group = State()

class Settings(StatesGroup):
    edit_name = State()
    schedule = State()
    homework_edit = State()
    homework_add_and_edit = State()
    new_headman = State()
    new_deputy = State()
    mail = State()


@router.message(CommandStart())
async def start(message: Message, bot: Bot):
    user_bool = await get.get_user_bool(message.from_user.id)
    user_group = await get.get_user_group(message.from_user.id)
    if not user_bool or user_group == 0:
        await message.answer(
            'üéì –ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–º–æ—â—å —Å —É—á–µ–±–æ–π, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? üìö‚ú®')
        start_command = message.text
        username = message.from_user.username
        referrer_id = str(start_command[7:])
        if str(referrer_id) != '':
            if str(referrer_id) != str(message.from_user.id):
                await set.set_user(message.from_user.id, int(referrer_id))
                await add.add_group_member(referrer_id)
                title = await get.get_group_title(referrer_id)
                await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É {title} üìö‚ú®',
                                     reply_markup=kbr.user_main)
                await bot.send_message(referrer_id, f'–í –≥—Ä—É–ø–ø—É –≤—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}')
            else:
                await message.answer('<ins>–ù–µ–ª—å–∑—è</ins> —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ!', parse_mode=ParseMode.HTML)
        else:
            await message.answer('\n\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:'
                                 '\n\nüéì <b>–Ø —Å—Ç—É–¥–µ–Ω—Ç</b> ‚Äî –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ.'
                                 '\nüßë‚Äçüè´ <b>–Ø —Å—Ç–∞—Ä–æ—Å—Ç–∞</b> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π –∏ –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                                 reply_markup=kb.user,
                                 parse_mode=ParseMode.HTML)
    else:
        user = await get.get_group_headman(message.from_user.id)
        deputy = await get.get_group_deputy(message.from_user.id)
        if user == message.from_user.id or deputy == message.from_user.id:
            await message.answer(
                'üéì –ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–º–æ—â—å —Å —É—á–µ–±–æ–π, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? üìö‚ú®',
            reply_markup=kbr.main)
        else:
            await message.answer(
                'üéì –ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–º–æ—â—å —Å —É—á–µ–±–æ–π, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? üìö‚ú®',
            reply_markup=kbr.user_main)

@router.callback_query(F.data == 'student')
async def student(callback: CallbackQuery):
    await callback.message.answer(
        '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Å–≤—è–∂–∏—Å—å —Å–æ —Å—Ç–∞—Ä–æ—Å—Ç–æ–π</b> –∏ –ø–æ–ø—Ä–æ—Å–∏ —É –Ω–µ–≥–æ —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥. üì≤'
        '\n\n–£–¥–∞—á–∏ –≤ —É—á–µ–±–µ! üçÄ',
        parse_mode=ParseMode.HTML)
    await asyncio.sleep(1)
    await callback.message.answer('üåü<b> –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏! </b>üåü'
                                  '\n\n–ß—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –Ω–∞—à–µ–º –±–æ—Ç–µ, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @vankavstanka_altgtu_news (https://t.me/vankavstanka_altgtu_news).'
                                  '\n\n–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º–∏, –∫—Ç–æ —É–∑–Ω–∞–µ—Ç –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏ —É–ª—É—á—à–µ–Ω–∏—è—Ö! üöÄ'
                                  '\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! ‚ù§Ô∏è',
                                  parse_mode=ParseMode.HTML,
                                  reply_markup=kb.news)

@router.callback_query(F.data == 'headman')
async def headman(callback: CallbackQuery):
    await set.set_user(callback.from_user.id)
    await callback.message.answer('–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã —Ç—ã —Å–º–æ–∂–µ—à—å:'
                                  '\n\n‚Ä¢ –ò–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóìÔ∏è'
                                  '\n\n‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É üìö'
                                  '\n\n‚Ä¢ –î–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–≤–æ–∏–º –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º üöÄ',
                                  reply_markup=kb.start)

@router.callback_query(F.data == 'new_group')
async def new_group(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('<b>‚ñé–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ <ins>–≤–∞—à–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ</ins></b>',
                                  parse_mode=ParseMode.HTML)
    await state.set_state(Reg.faculty)

@router.message(Reg.faculty)
async def faculty(message: Message, state: FSMContext):
    await state.update_data(faculty=message.text)
    await message.answer('<b>‚ñé–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <ins>–≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã</ins></b>',
                         parse_mode=ParseMode.HTML)
    await state.set_state(Reg.group)


@router.message(Reg.group)
async def group(message: Message, state: FSMContext):
    counter = 0
    for title in await get.get_groups_titles():
        if title == message.text:
            counter += 1
    if counter == 0:
        await state.update_data(group=message.text)
        data = await state.get_data()
        await message.answer(f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –≥—Ä—É–ø–ø—É {data["group"]} ‚ú®', reply_markup=kbr.main)
        await state.clear()
        await set.set_group(message.from_user.id, data["group"], data["faculty"])
        await set.set_user_group(message.from_user.id, message.from_user.id)
        await add.add_group_member(message.from_user.id)
        await asyncio.sleep(1)

        headman = await get.get_group_headman(message.from_user.id)
        link = f'https://t.me/vanka_altgtu_bot?start={headman}'

        if os.path.exists(rf"qr-codes\{headman}.jpg"):
            qr = FSInputFile(f"qr-codes/{headman}.jpg")

        else:
            # –∏–º—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            filename = f"qr-codes/{headman}.jpg"
            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º qr-–∫–æ–¥
            img = qrcode.make(link)
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º img –≤ —Ñ–∞–π–ª
            img.save(filename)
            qr = FSInputFile(f"qr-codes/{headman}.jpg")
        await message.answer_photo( photo=qr,
                                    caption=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã'
                                            '\n\n–ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ!'
                                            '\n\n–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª(–∞) QR-–∫–æ–¥ –∏ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å –∏–º–∏ —Å –Ω–æ–≤—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ª–µ–≥–∫–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!'
                                            f'\n\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n{link}'
                                            f'\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å, –¥–∞–π –∑–Ω–∞—Ç—å!'
                                            f'\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É! üí™')

        await asyncio.sleep(1)
    else:
        await message.answer('–î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä–æ—Å—Ç–µ.')


@router.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
async def settings(message: Message):
    headman = await get.get_group_headman(message.from_user.id)
    deputy = await get.get_group_deputy(message.from_user.id)
    if headman == message.from_user.id:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è! \n'
                             '–ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞ —Å—Ç–∞—Ä–æ—Å—Ç—ã, –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è, –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–≤–æ–∏ –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º',
                             reply_markup=kb.headman_settings)
    elif deputy == message.from_user.id:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è! \n'
                             '–ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–≤–æ–∏ –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º',
                             reply_markup=kb.deputy_settings)
    else:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è! \n'
                             '–ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É',
                             reply_markup=kb.user_settings)


@router.callback_query(F.data  == 'upload_schedule')
async def upload_schedule(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:')
    await state.set_state(Settings.schedule)

@router.message(Settings.schedule)
async def schedule(message: Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!')
        await state.clear()
        return

    await add.add_schedule(message.from_user.id, message.text)
    await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! –°—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ...')
    await state.clear()


@router.callback_query(F.data == 'leave_from_group')
async def leave_from_group(callback: CallbackQuery):
    await set.set_user_group(callback.from_user.id, 0)

    headman = await get.get_group_headman(callback.from_user.id)
    await add.minus_group_member(headman)

    await callback.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É')


@router.callback_query(F.data == 'edit_group_name')
async def leave_from_group(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Settings.edit_name)
    await callback.message.answer('<b>‚ñé–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <ins>–≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã</ins></b>',
                                  parse_mode=ParseMode.HTML,
                                  reply_markup=kb.edit_group_name)

@router.message(Settings.edit_name)
async def edit_group(message: Message, state: FSMContext):
    data = message.text
    await state.update_data(edit_name=data)
    await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞ {data}')
    await state.clear()


@router.callback_query(F.data == 'no_edit')
async def no_edit(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã')


@router.callback_query(F.data == 'change_homework')
async def set_homework(callback: CallbackQuery):
    headman = await get.get_group_headman(callback.from_user.id)
    homework = await get.get_homework(headman)
    await callback.message.answer(f'–¢–µ–∫—É—â–µ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n {homework}', reply_markup=kb.set_homework)

@router.callback_query(F.data == 'edit')
async def set_homework(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Settings.homework_edit)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ <ins>–Ω–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</ins>', parse_mode=ParseMode.HTML)

@router.callback_query(F.data == 'add_and_edit')
async def set_homework(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Settings.homework_add_and_edit)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ, <ins>—á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å</ins>', parse_mode=ParseMode.HTML)


@router.message(Settings.homework_add_and_edit)
async def get_new_homework(message: Message, state: FSMContext):
    await state.update_data(homework_add_and_edit=message.text)
    data = message.text
    headman = await get.get_group_headman(message.from_user.id)
    await add.add_and_edit_homework(headman, data)
    homework = await get.get_homework(message.from_user.id)
    await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞: \n\n {homework}', reply_markup=kb.finish_homework_add_and_edit)


@router.message(Settings.homework_edit)
async def get_new_homework(message: Message, state: FSMContext):
    await state.update_data(homework_edit=message.text)
    data = message.text
    headman = await get.get_group_headman(message.from_user.id)
    await add.edit_homework(headman, data)
    homework = await get.get_homework(message.from_user.id)
    await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞: \n\n {homework}', reply_markup=kb.finish_homework_edit)


@router.callback_query(F.data == 'save_homework_edit')
async def save_homework(callback: CallbackQuery, state: FSMContext):
    homework = await get.get_homework(callback.from_user.id)
    await state.clear()
    await callback.message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞: \n\n {homework}')


@router.callback_query(F.data == 'save_homework_add_and_edit')
async def save_homework(callback: CallbackQuery, state: FSMContext):
    homework = await get.get_homework(callback.from_user.id)
    await state.clear()
    await callback.message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞: \n\n {homework}')


@router.callback_query(F.data == 'change_headman')
async def change_headman(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —é–∑ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä–æ—Å—Ç—ã:')
    await state.set_state(Settings.new_headman)


@router.message(Settings.new_headman)
async def get_new_homework(message: Message, state: FSMContext, bot: Bot):
    mention = re.search(r'@(\w+)', message.text)

    await state.update_data(new_headman=message.text)

    if mention:
        username = mention.group(1)
        headman = await resolve_username_to_user_id(username)

        user = await get.get_user_bool(headman)
        old_headman = await get.get_user_group(headman)
        print(headman)
        print(old_headman)
        print(message.from_user.id)

        if headman != message.from_user.id and old_headman == message.from_user.id:
            users = await get.get_group_users(message.from_user.id)

            for user in users:
                await set.set_user_group(user, headman)

            await add.new_headman(message.from_user.id, headman)
            await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–∞–≤–∞ —Å—Ç–∞—Ä–æ—Å—Ç—ã - @{username}!', reply_markup=kbr.user_main)
            await bot.send_message(headman, '–í–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–∞–≤–∞ —Å—Ç–∞—Ä–æ—Å—Ç—ã –≤ –≥—Ä—É–ø–ø–µ!', reply_markup=kbr.main)

        elif not user:
            await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.')

        elif headman == message.from_user.id:
            await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–µ–±—è —Å–Ω–æ–≤–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç–∞—Ä–æ—Å—Ç–æ–π')

        elif old_headman != message.from_user.id:
            await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ.')

        await state.clear()


@router.callback_query(F.data == 'change_deputy')
async def change_deputy(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —é–∑ –Ω–æ–≤–æ–≥–æ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã:')
    await state.set_state(Settings.new_deputy)


@router.message(Settings.new_deputy)
async def get_new_deputy(message: Message, state: FSMContext, bot: Bot):
    mention = re.search(r'@(\w+)', message.text)

    await state.update_data(new_deputy=message.text)

    if mention:
        username = mention.group(1)
        deputy = await resolve_username_to_user_id(username)

        user = await get.get_user_bool(deputy)
        headman = await get.get_user_group(deputy)
        if deputy != message.from_user.id and headman == message.from_user.id:
            await add.new_deputy(message.from_user.id, deputy)
            await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã - @{username}!')
            await bot.send_message(deputy, '–í–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã –≤ –≥—Ä—É–ø–ø–µ!', reply_markup=kbr.main)

        elif not user:
            await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.')

        elif deputy == message.from_user.id:
            await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º —Å—Ç–∞—Ä–æ—Å—Ç—ã.')

        elif headman != message.from_user.id:
            await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ.')

        await state.clear()

@router.callback_query(F.data == 'link')
async def change_headman(callback: CallbackQuery):
    headman = await get.get_group_headman(callback.from_user.id)
    link = f'https://t.me/vanka_altgtu_bot?start={headman}'

    if os.path.exists(rf"qr-codes\{headman}.jpg"):
        qr = FSInputFile(f"qr-codes/{headman}.jpg")
        await callback.message.answer_photo(photo=qr,
                                            caption=f'–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! üëã'
                                                    '\n\n–ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ!'
                                                    '\n\n–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª(–∞) QR-–∫–æ–¥ –∏ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å –∏–º–∏ —Å –Ω–æ–≤—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ª–µ–≥–∫–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!'
                                                    f'\n\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n{link}'
                                                    f'\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å, –¥–∞–π –∑–Ω–∞—Ç—å!'
                                                    f'\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É! üí™')
    else:
        # –∏–º—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        filename = f"qr-codes/{headman}.jpg"
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º qr-–∫–æ–¥
        img = qrcode.make(link)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º img –≤ —Ñ–∞–π–ª
        img.save(filename)
        qr = FSInputFile(f"qr-codes/{headman}.jpg")
        await callback.message.answer_photo(photo=qr,
                                            caption=f'–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! üëã'
                                                    '\n\n–ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ!'
                                                    '\n\n–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª(–∞) QR-–∫–æ–¥ –∏ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å –∏–º–∏ —Å –Ω–æ–≤—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ª–µ–≥–∫–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!'
                                                    f'\n\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n{link}'
                                                    f'\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å, –¥–∞–π –∑–Ω–∞—Ç—å!'
                                                    f'\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É! üí™')

@router.callback_query(F.data == 'mailing_list')
async def change_headman(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('üöÄ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    await state.set_state(Settings.mail)


@router.message(Settings.mail)
async def mailing(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(mail=message.text)
    mail = f'üì¢ –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∑—å—è! üåü –≠—Ç–æ –≤–∞—à —Å—Ç–∞—Ä–æ—Å—Ç–∞, –∏ —É –º–µ–Ω—è –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! \n\n<blockquote><b>{message.text}</b></blockquote>'

    headman = await get.get_group_headman(message.from_user.id)
    users = await get.get_group_users(headman)
    for user in users:
        await bot.send_message(user, mail, parse_mode=ParseMode.HTML)


